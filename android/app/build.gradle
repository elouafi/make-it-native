apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "com.google.gms.google-services"
apply plugin: "com.google.firebase.crashlytics"
apply plugin: "kotlin-kapt"
apply plugin: "androidx.navigation.safeargs.kotlin"

import com.android.build.OutputFile

project.ext.react = [
        bundleForVariant: { def variant -> false },
        enableHermes: false
]

apply from: file("../../node_modules/react-native/react.gradle")

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = "org.webkit:android-jsc-intl:+"`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = "org.webkit:android-jsc:+"

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Whether to load react from source or use the prepacked package
 *
 * Keep false for faster compilation and avoid the need for an NDK to be installed.
 * Use true if you want to debug and modify RN source, say for patching.
 */
def reactNativeFromSource = BUILD_RN_FROM_SOURCE.toBoolean()

/**
 * Architectures to build native code for.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    compileSdkVersion rootProject.compileSdkVersion

    // We use NDK 23 which has both M1 support and is the side-by-side NDK version from AGP.
    ndkVersion = "23.1.7779620"

    defaultConfig {
        applicationId "com.mendix.developerapp.mx10"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode project.hasProperty('versionCode') ? Integer.parseInt(project.versionCode) : 10
        versionName project.hasProperty('versionName') ? project.versionName : "1.1.0"
        missingDimensionStrategy "react-native-camera", "general"
        testBuildType System.getProperty("testBuildType", "debug")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "boolean", "DETOX", "false"
        buildConfigField "String", "RUNTIME_URL", '""'
        buildConfigField "boolean", "OTA", "false"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    
    signingConfigs {
        debug {
            Properties debugProps = new Properties()
            def propFile = new File('./keystores/debug.keystore.properties')
            if (propFile.canRead()) {
                debugProps.load(new FileInputStream(propFile))

                storeFile file(debugProps["key.store"])
                storePassword debugProps["key.store.password"]
                keyAlias debugProps["key.alias"]
                keyPassword debugProps["key.alias.password"]
            } else {
                print 'debug.keystore.properties not found'
            }
        }
        release {
            Properties releaseProps = new Properties()
            def propFile = new File('./local.properties')
            if (propFile.canRead()) {
                releaseProps.load(new FileInputStream(propFile))

                storeFile file(releaseProps["key.store"])
                storePassword releaseProps["key.store.password"]
                keyAlias releaseProps["key.alias"]
                keyPassword releaseProps["key.alias.password"]
            } else {
                print 'local.properties not found'
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            ndk {
                abiFilters (*reactNativeArchitectures())
            }
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    flavorDimensions "version"
    productFlavors {
        production {
            dimension "version"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }
    buildFeatures {
        compose true
        viewBinding true
        dataBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.7'
    }
    packagingOptions {
        pickFirst "**/*.so"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // React Native Core
    if (reactNativeFromSource) {
        implementation project(":ReactAndroid")
    } else {
        implementation "com.facebook.react:react-native:+"
    }

    // Flipper debugger
    implementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group: "com.facebook.fbjni"
    }
    implementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: "com.facebook.flipper"
        exclude group: "com.squareup.okhttp3", module: "okhttp"
    }
    implementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group: "com.facebook.flipper"
    }

    // Javascript engine
    if (enableHermes) {
        //noinspection GradleDynamicVersion
        implementation("com.facebook.react:hermes-engine:+") { // From node_modules
            exclude group:"com.facebook.fbjni"
        }
    } else {
        implementation jscFlavor
    }

    // Mendix dependencies
    implementation project(":mendixnative-release")
    implementation project(":react-native-code-push")

    // Dev app dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "android.arch.lifecycle:extensions:1.1.1"
    implementation "com.google.android.material:material:1.4.0"
    implementation "androidx.core:core-ktx:$androidx_core_version"
    implementation "androidx.activity:activity-ktx:1.3.1"
    implementation "androidx.fragment:fragment-ktx:1.3.6"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$androidx_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidx_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$androidx_lifecycle_version"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.navigation:navigation-common-ktx:2.3.5"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.5"
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.5"
    implementation "androidx.navigation:navigation-runtime-ktx:2.3.5"
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "com.android.support.constraint:constraint-layout:$constraint_layout_version"
    implementation("com.journeyapps:zxing-android-embedded:4.1.0") { transitive = false }
    implementation "com.google.zxing:core:3.4.0"
    implementation "me.leolin:ShortcutBadger:1.1.22@aar"
    implementation platform("com.google.firebase:firebase-bom:32.3.1")
    implementation "com.google.firebase:firebase-crashlytics"
    implementation "com.google.firebase:firebase-analytics"
    implementation "com.google.firebase:firebase-messaging"
    implementation "com.google.code.gson:gson:2.8.9"
    implementation "com.github.yuriy-budiyev:code-scanner:2.1.0"
    implementation "com.fasterxml.jackson.core:jackson-core:2.11.3"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.11.3"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.11.3"
    implementation "androidx.activity:activity-compose:1.3.1"
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation "androidx.compose.foundation:foundation:$compose_ui_version"
    implementation 'androidx.compose.material:material:1.2.0'
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"

    implementation 'androidx.security:security-crypto:1.1.0-alpha03'

    implementation "androidx.camera:camera-camera2:$camerax_version"
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    implementation "androidx.camera:camera-view:$camerax_version"
    implementation 'com.google.mlkit:barcode-scanning:17.0.3'
    implementation "com.google.guava:guava:31.0.1-android"
    implementation("androidx.core:core-splashscreen:1.0.0")

    androidTestImplementation "junit:junit:4.13.1"
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
}

configurations.all {
    resolutionStrategy {
        force "androidx.lifecycle:lifecycle-viewmodel:$androidx_lifecycle_version"
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle");
applyNativeModulesAppBuildGradle(project)
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
